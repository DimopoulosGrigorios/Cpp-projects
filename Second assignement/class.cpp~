//File:class.cpp
#include <iostream>
#include "class.h"
#include <cstdlib>
using namespace std;
//Synarthseis Node//
Node::Node(IceSkater& skater,Node*n=NULL):pagodromos(skater),next(n){}
Node::~Node(){}
//Synarthseis List//
List::List():start(NULL),last(NULL),size(0),m_pagodromoi(0),a_pagodromoi(0){}
List::~List(){}
Node * List::getStart(){return start;}
Node * List::getLast(){return last;}
int List::getSize(){return size;}
int List::getM_pagodromoi(){return m_pagodromoi;}
int List:: getA_pagodromoi(){return a_pagodromoi;}
void List::pushFront(IceSkater& skate)
{
	if ((start==NULL)&&(last==NULL))
	{
		start= new Node(skate,start);
		last=start;
        	size++;
		if  (skate.getColour()==black)
		{
			m_pagodromoi++;
		}
		else
		{
			a_pagodromoi++;
		}
	}
	else
	{	
		start= new Node(skate,start);
		size++;
		if  (skate.getColour()==black)
                {
                        m_pagodromoi++;
                }
                else  
                {
                        a_pagodromoi++;
                }

	}
}
bool  List::popBack()
{
	if((start==NULL)&&(last==NULL))
	{
		return false;
	}
	Node* t;
	int i;
	t=start;
	for(i=1;i<=(size-2);i++)
	{
		 t=t->next;
	}	
	if (((last->pagodromos).getColour())==black)
        {
               m_pagodromoi--;
        }
        else  
        {
               a_pagodromoi--;
        }
	delete last;
	last=t;
	size--;
	return true;
}
bool List:: popFront()
{	
	Node * t=start;
	if((last==NULL)&&(start==NULL))return false;
	if  (((start->pagodromos).getColour())==black)
        {
               m_pagodromoi--;
        }
        else  
        {
               a_pagodromoi--;
        }
	start=start->next;
	delete t;
	size--;
	return true;
}
IceSkater* List::at(int pos)
{
	int i;
	if ( pos < 0 || pos >= size ) return NULL;
	Node* t = start;
	for (i = 0 ; i < pos ; i++) t = t->next;
	return &(t->pagodromos);
}
//Synarthseis Lake//
Lake::Lake(int l):length(l){}
Lake::~Lake(){}
int Lake::getLength(){return length;}
List * Lake::k_a_stoiba(){return &k_a_stoiba_;}
List * Lake::k_d_stoiba(){return &k_d_stoiba_;}
List * Lake::p_a_stoiba(){return &p_a_stoiba_;}
List * Lake::p_d_stoiba(){return &p_d_stoiba_;}
//Synarthseis IceSkater//
IceSkater::IceSkater(int dista,color xrwma_ ,skill deks,int identification):id(identification),distance(dista),_deksiothta(deks),xrwma(xrwma_)
{
	position=0;
}
IceSkater::IceSkater(const IceSkater& skater) : id(skater.id),distance(skater.distance),position(skater.position),xrwma(skater.xrwma),_deksiothta(skater._deksiothta)
{
}
IceSkater::~IceSkater(){}
skill IceSkater::deksiotita()
{
	return _deksiothta;
}
int IceSkater::skate(int dist)
{
	position=dist;
	if ((dist%distance)==0)
	{
		return (dist/distance);	
	}
	else
	{
		return ((dist/distance)+1);
	}
}
int IceSkater::getPosition()
{
	return position;
}
int IceSkater::getTautothta()
{
	return id;
}
color IceSkater::getColour()
{
	return xrwma;
}
int IceSkater::random_id(List* listaK,List* listaB)
{
	int random23;
	random23=rand()%2+(2*((*listaK).getSize()+(*listaB).getSize()));
	return random23;
}
int IceSkater::random_distance(Lake limnoutza)
{
	int i;
	 i=rand()%(limnoutza.getLength());
	while(i==0)i=rand()%(limnoutza.getLength());
	return i;	
}
color IceSkater::random_colour()
{
	if( (rand()%2)==1)
	{
		return black;
	}
	else
	{
		return white;
	}
}
skill IceSkater::random_skill()
{
	if( (rand()%2)==1)
        {
                return jump;
        }
        else
        {
                return spin;
        }

}
//Synarthseis Scence//
Scence::Scence(int l,int num=0):limni(l),ar_pagodromwn(num){}
Scence::~Scence(){}
int Scence::getAr_pagodromwn()
{
	return ar_pagodromwn;
}
void Scence::fullK_oura(int n)
{
	
	if((n%2)==0)
	{
		IceSkater *ska,*temp,*t_m_p;
		color previous=nothing,xrwma_b_ouras=nothing;
		int m_p_b_ou=0,m_p_k_ou=0,i=0,a_p_b_ou=0,a_p_k_ou=0;
		while(i<n)
		{
			if ((bohthitiki_oura.getSize()) && (previous!=xrwma_b_ouras))
			{	
				temp=(bohthitiki_oura.at(bohthitiki_oura.getSize()-1));
				t_m_p=new IceSkater(*temp);
				kyria_oura.pushFront(*t_m_p);
				cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the MainQueue"<<endl;
				cout<<"_________XRWMA_________"<<(*t_m_p).getColour()<<endl;
				previous=(*t_m_p).getColour();
				cout<<"xrwma eisagwmenou apo help"<<(*t_m_p).getColour()<<endl;
				cout<<"XRWMA HELP"<<xrwma_b_ouras<<endl;
				cout<<"<---eisagwgh apo help mesa se while einai-->"<<endl;
				cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from the HelpQueue"<<endl;
				bohthitiki_oura.popBack();
			}
			else
			{
				a_p_k_ou=kyria_oura.getA_pagodromoi();
                                a_p_b_ou=bohthitiki_oura.getA_pagodromoi();
				m_p_k_ou=kyria_oura.getM_pagodromoi();
				m_p_b_ou=bohthitiki_oura.getM_pagodromoi();
				cout<<"!!!!!!!!!!!!arithmos maurwn!!!!!!!!!!!"<< (m_p_k_ou+m_p_b_ou)<<endl;
				cout<<"!!!!!!!!!!!!!arithmos asprwn!!!!!!!!"<<(a_p_k_ou+a_p_b_ou)<<endl;
				if((m_p_k_ou+m_p_b_ou)==n/2)
				{
					ska=new IceSkater((*ska).random_distance(limni),white,(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
					cout<<"xrwma eksanagasmenou white stoixeiou"<<(*ska).getColour()<<endl;
					cout<<"xrwma previous"<<previous<<endl;
					cout<<"megethos help"<<bohthitiki_oura.getSize() <<endl;
					if ((*ska).getColour()==previous)
                                        {
                                                bohthitiki_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the HelpQueue"<<endl;
						cout<<"_________XRWMA_________"<<(*ska).getColour()<<endl;
						cout<<"<-----white eksanagasmeno se help----->"<<endl;
                                                xrwma_b_ouras=(*ska).getColour();
                                        }
                                        else
                                        {
                                                kyria_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the MainQueue"<<endl;
						cout<<"_________XRWMA_________"<<(*ska).getColour()<<endl;
						cout<<"<<-----white eksanagasmeno se main------>>"<<endl;
                                                previous=(*ska).getColour();
                                        }

				}
				else if((a_p_k_ou+a_p_b_ou)==n/2)
				{
				
					ska=new IceSkater((*ska).random_distance(limni),black,(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
					 cout<<"xrwma eksanagasmenou black stoixeiou"<<(*ska).getColour()<<endl;
                                        cout<<"xrwma previous"<<previous<<endl;
                                        cout<<"megethos help"<<bohthitiki_oura.getSize() <<endl;
					if ((*ska).getColour()==previous)
                                        {
                                                bohthitiki_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the HelpQueue"<<endl;
						cout<<"_________XRWMA_________"<<(*ska).getColour()<<endl;
						cout<<"<-----eksanagamseno black se help------>"<<endl;
                                                xrwma_b_ouras=(*ska).getColour();
                                        }
                                        else
                                        {
                                                kyria_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the MainQueue"<<endl;
						cout<<"_________XRWMA_________"<<(*ska).getColour()<<endl;
						cout<<"<--------eksanagasmeno black se MAIN------->"<<endl;
                                                previous=(*ska).getColour();
                                        }

				}
				else
				{
					ska=new IceSkater((*ska).random_distance(limni),(*ska).random_colour(),(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
					if ((*ska).getColour()==previous)
                                        {
                                                bohthitiki_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the HelpQueue"<<endl;
						cout<<"<========help====tyxaio===>"<<endl;
						cout<<"_________XRWMA_________"<<(*ska).getColour()<<endl;
                                                xrwma_b_ouras=(*ska).getColour();
                                        }
                                        else
                                        {
                                                kyria_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the MainQueue"<<endl;
						cout<<"<====tyxaio=main=====>"<<endl;
						cout<<"_________XRWMA_________"<<(*ska).getColour()<<endl;
                                                previous=(*ska).getColour();
                                        }
				}
				i++;
			}
		cout<<endl;
		cout<<endl;
		 cout<<endl;
                cout<<endl;

		}
		if(bohthitiki_oura.getSize())
		{
			temp=(bohthitiki_oura.at(bohthitiki_oura.getSize()-1));
			t_m_p=new IceSkater(*temp);
                	kyria_oura.pushFront(*t_m_p);
                	cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the MainQueue"<<endl;
			cout<<"_________XRWMA_________"<<(*t_m_p).getColour()<<endl;
                	previous=(*t_m_p).getColour();
			cout<<"<---eisagwgh apo help !!!eksw!!! apo while -->"<<endl;
                	cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from the HelpQueue"<<endl;
			bohthitiki_oura.popBack();
		}
	}
	else
	{
	
		IceSkater *ska,*temp,*t_m_p;
		color previous=nothing,xrwma_b_ouras=nothing;
		int m_p_b_ou=0,m_p_k_ou=0,i=0,a_p_b_ou=0,a_p_k_ou=0;
		while(i<(n-1))
		{
			if ((bohthitiki_oura.getSize()) && (previous!=xrwma_b_ouras))
			{	
				temp=(bohthitiki_oura.at(bohthitiki_oura.getSize()-1));
				t_m_p=new IceSkater(*temp);
				kyria_oura.pushFront(*t_m_p);
				cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the MainQueue"<<endl;
				previous=(*t_m_p).getColour();
				cout<<"Deleting Iceskater"<<(*t_m_p).getTautothta()<<"from the HelpQueue"<<endl;
				bohthitiki_oura.popBack();
			}
			else
			{
				a_p_k_ou=kyria_oura.getA_pagodromoi();
                                a_p_b_ou=bohthitiki_oura.getA_pagodromoi();
                                m_p_k_ou=kyria_oura.getM_pagodromoi();
                                m_p_b_ou=bohthitiki_oura.getM_pagodromoi();
				if((m_p_k_ou+m_p_b_ou)==(n-1)/2)
				{
					ska=new IceSkater((*ska).random_distance(limni),white,(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
					if ((*ska).getColour()==previous)
                                        {
						cout<<"wrong"<<endl;
                                                bohthitiki_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the HelpQueue"<<endl;
                                                xrwma_b_ouras=(*ska).getColour();
                                        }
                                        else
                                        {
                                                kyria_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the MainQueue"<<endl;
                                                previous=(*ska).getColour();
                                        }

				}
				else if((a_p_k_ou+a_p_b_ou)==(n-1)/2)
				{
					ska=new IceSkater((*ska).random_distance(limni),black,(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
					if ((*ska).getColour()==previous)
                                        {
						cout<<"wronga"<<endl;
                                                bohthitiki_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the HelpQueue"<<endl;
                                                xrwma_b_ouras=(*ska).getColour();
                                        }
                                        else
                                        {
                                                kyria_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the MainQueue"<<endl;
                                                previous=(*ska).getColour();
                                        }

				}
				else
				{
					ska=new IceSkater((*ska).random_distance(limni),(*ska).random_colour(),(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
					if ((*ska).getColour()==previous)
                                        {
                                                bohthitiki_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the HelpQueue"<<endl;
                                                xrwma_b_ouras=(*ska).getColour();
                                        }
                                        else
                                        {
                                                kyria_oura.pushFront((*ska));
						cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the MainQueue"<<endl;
                                                previous=(*ska).getColour();
                                        }
				}
				i++;
			}
		}
		if(bohthitiki_oura.getSize())
		{
			temp=(bohthitiki_oura.at(bohthitiki_oura.getSize()-1));
			t_m_p=new IceSkater(*temp);
                	kyria_oura.pushFront(*t_m_p);
                	cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the MainQueue"<<endl;
                	previous=(*t_m_p).getColour();
                	cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from the HelpQueue"<<endl;
			bohthitiki_oura.popBack();
		}
		color prwto;
			if((n!=1)&&(n!=0))
			{
				prwto=((kyria_oura.getLast())->pagodromos).getColour();
				ska=new IceSkater((*ska).random_distance(limni),prwto,(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
			}
			else if(n==1)
			{
				ska=new IceSkater((*ska).random_distance(limni),(*ska).random_colour(),(*ska).random_skill(),(*ska).random_id(&kyria_oura,&bohthitiki_oura)) ;
			}
		kyria_oura.pushFront((*ska));
		cout<<"Adding Iceskater"<<(*ska).getTautothta()<<"to the MainQueue"<<endl;
	}
		
}
void Scence::full_stoibes()
{
	IceSkater   *temp ,*t_m_p;
	int flag,i,j=0;
	int nonskipper=0;
	while((kyria_oura.getSize())!=0)
	{	
		i=-1;
		flag=0;
		while(((kyria_oura.getSize())!=0)&&(i<3))
		{
			i++;
			if (j==i+1+nonskipper)
			{
				flag=1;
				continue;
			}
			cout<<"size main-----"<<kyria_oura.getSize()<<endl;
			temp=(kyria_oura.at((kyria_oura.getSize())-1));
			t_m_p=new IceSkater(*temp);
			if (i==0)
			{
				(*(limni.k_a_stoiba())).pushFront((*t_m_p));
				cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the down left Stack"<<endl;
			}
			else if (i==1)
			{
				(*(limni.k_d_stoiba())).pushFront((*t_m_p));
				cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the down right Stack"<<endl;
			}
			else if (i==2)
			{
				(*(limni.p_d_stoiba())).pushFront((*t_m_p));
				cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the upper right Stack"<<endl;
			}
			else if (i==3)
			{
				(*(limni.p_a_stoiba())).pushFront((*t_m_p));
				cout<<"Adding Iceskater"<<(*t_m_p).getTautothta()<<"to the upper left Stack"<<endl;
			}			
			cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from Main Queue"<<endl;
                        kyria_oura.popBack();
			cout<<"done"<<endl;

		}
		if (flag==0)
		{
			nonskipper=j;
		}
		j++;

	}
}
void Scence::performance()
{
	IceSkater *temp;
	while((*(limni.k_a_stoiba())).getSize()+(*(limni.k_d_stoiba())).getSize()+(*(limni.p_d_stoiba())).getSize()+(*(limni.p_a_stoiba())).getSize()!=0)
	{
		/////////////////////////////////////////
		if ((*(limni.k_a_stoiba())).getSize()!=0)
		{
		
			temp=(*(limni.k_a_stoiba())).at(0);
			if ((*temp).deksiotita()==jump)
			{
				cout<<"My skill is jump"<<endl;
			}
			else
			{
				cout<<"My skill is  spin"<<endl;
			}
			cout<<"I had make"<<(*temp).skate(limni.getLength())<<"skates"<<endl;
			cout<<"My ID is"<<(*temp).getTautothta()<<endl;
			if((*temp).getColour()==black)
			cout<<"My colour is black"<<endl;
			else cout<<"My colour is white"<<endl;
			cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from down left Stack"<<endl;
			(*(limni.k_a_stoiba())).popFront();

		}
		///////////////////////////////////////
		 if ((*(limni.k_d_stoiba())).getSize()!=0)
                {
                 
			temp=(*(limni.k_d_stoiba())).at(0);
                	if ((*temp).deksiotita()==jump)
                	{
                        	cout<<"My skill is jump"<<endl;
                	}
                	else
                	{
                        	cout<<"My skill is  spin"<<endl;
                	}
                	cout<<"I had make"<<(*temp).skate(limni.getLength())<<"skates"<<endl;
                	cout<<"My ID is"<<(*temp).getTautothta()<<endl;
                	if((*temp).getColour()==black)
               	 	cout<<"My colour is black"<<endl;
                	else cout<<"My colour is white"<<endl;
			cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from down right Stack"<<endl;
			(*(limni.k_d_stoiba())).popFront();

		}
		/////////////////////////////////////////
		 if ((*(limni.p_d_stoiba())).getSize()!=0)
                {
			temp=(*(limni.p_d_stoiba())).at(0);
                	if ((*temp).deksiotita()==jump)
                	{
                        	cout<<"My skill is jump"<<endl;
                	}
                	else
                	{
                        	cout<<"My skill is  spin"<<endl;
                	}
                	cout<<"I had make"<<(*temp).skate(limni.getLength())<<"skates"<<endl;
                	cout<<"My ID is"<<(*temp).getTautothta()<<endl;
                	if((*temp).getColour()==black)
                	cout<<"My colour is black"<<endl;
                	else cout<<"My colour is white"<<endl;
			cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from upper right Stack"<<endl;
                	(*(limni.p_d_stoiba())).popFront();
		}
		//////////////////////////////////////////////
		 if ((*(limni.p_a_stoiba())).getSize()!=0)
                {
			temp=(*(limni.p_a_stoiba())).at(0);
                	if ((*temp).deksiotita()==jump)
                	{
                        	cout<<"My skill is jump"<<endl;
                	}
                	else
                	{
                        	cout<<"My skill is  spin"<<endl;
                	}
                	cout<<"I had make"<<(*temp).skate(limni.getLength())<<"skates"<<endl;
                	cout<<"My ID is"<<(*temp).getTautothta()<<endl;
                	if((*temp).getColour()==black)
                	cout<<"My colour is black"<<endl;
                	else cout<<"My colour is white"<<endl;
			cout<<"Deleting Iceskater"<<(*temp).getTautothta()<<"from upper left Stack"<<endl;
                	(*(limni.p_a_stoiba())).popFront();

		}
		////////////////////////////////
	}
}
void Scence::plot()
{
	if (ar_pagodromwn!=0)
	{
		fullK_oura(ar_pagodromwn);
		full_stoibes();
		performance();
	}
	else
	{
		cout<<"WARNING:The amount of IceSkaters cants be zero"<<endl;
	}
}
